services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tasks
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "3012:3012"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=tasks
      - DB_SSLMODE=disable
      - HTTP_ADDRESS=0.0.0.0:3012
      - NOTIFICATION_SERVICE_ADDRESS=notification-service:2000
    depends_on:
      postgres:
        condition: service_healthy
      notification-service:
        condition: service_started
    networks:
      - app-network

  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    ports:
      - "2000:2000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=tasks
      - DB_SSLMODE=disable
      - NOTIFICATION_SERVICE_ADDRESS=0.0.0.0:2000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  # frontend:
  #   build:
  #     context: .
  #     dockerfile: frontend/Dockerfile
  #   ports:
  #     - "3010:3010"
  #   environment:
  #     - PORT=3010
  #     - APP_PORT=3010
  #     - NEXT_PUBLIC_BACKEND_API_URL=http://gateway:3012
  #   depends_on:
  #     - gateway
  #   networks:
  #     - app-network

  # Email service with AWS Lambda and SQS
  elasticmq:
    container_name: elasticmq
    image: softwaremill/elasticmq-native
    ports:
      - "9324:9324"
    volumes:
      - ./email-service/elasticmq.conf:/opt/elasticmq.conf
    networks:
      - app-network

  # Initialize SQS queue using AWS CLI
  sqs-init:
    container_name: sqs-init
    image: amazon/aws-cli:latest
    entrypoint: ["/bin/bash", "-c"]
    volumes:
      - ./email-service/create-sqs-queue.sh:/create-sqs-queue.sh
    command: >
      "
      sleep 15 &&
      chmod +x /create-sqs-queue.sh && 
      echo 'Creating SQS queues...' &&
      /create-sqs-queue.sh
      "
    environment:
      - AWS_ENDPOINT_URL=http://elasticmq:9324
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
      - SQS_QUEUE_NAME=go-email-service-queue
    depends_on:
      - elasticmq
    networks:
      - app-network

  email-service:
    container_name: email-service
    build:
      context: .
      dockerfile: email-service/Dockerfile.local
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tasks
      - AWS_ENDPOINT_URL=http://elasticmq:9324
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
      - SQS_QUEUE_NAME=go-email-service-queue
      - DEBUG=1
    volumes:
      - ./email-service/logs:/tmp
    depends_on:
      postgres:
        condition: service_healthy
      elasticmq:
        condition: service_started
      sqs-init:
        condition: service_completed_successfully
    networks:
      - app-network

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
